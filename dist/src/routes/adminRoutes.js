"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const studentController_1 = __importDefault(require("../controllers/studentController"));
const studentService_1 = __importDefault(require("../services/studentService"));
const studentRepository_1 = __importDefault(require("../repositories/studentRepository"));
const otpRepository_1 = __importDefault(require("../repositories/otpRepository"));
const catagoriesControlller_1 = __importDefault(require("../controllers/catagoriesControlller"));
const catoogariesServices_1 = __importDefault(require("../services/catoogariesServices"));
const catogariesRepository_1 = __importDefault(require("../repositories/catogariesRepository"));
const instructorController_1 = __importDefault(require("../controllers/instructorController"));
const instructorService_1 = __importDefault(require("../services/instructorService"));
const instructorRepository_1 = __importDefault(require("../repositories/instructorRepository"));
const courseConstroller_1 = __importDefault(require("../controllers/courseConstroller"));
const courseService_1 = __importDefault(require("../services/courseService"));
const courseRepository_1 = __importDefault(require("../repositories/courseRepository"));
const lessonService_1 = __importDefault(require("../services/lessonService"));
const lessonsRepository_1 = __importDefault(require("../repositories/lessonsRepository"));
const chapterService_1 = __importDefault(require("../services/chapterService"));
const chapterRepository_1 = __importDefault(require("../repositories/chapterRepository"));
const enrolledCourseService_1 = __importDefault(require("../services/enrolledCourseService"));
const enrolledCourseRepository_1 = __importDefault(require("../repositories/enrolledCourseRepository"));
const assignmentRepository_1 = __importDefault(require("../repositories/assignmentRepository"));
let studentController = new studentController_1.default(new studentService_1.default(new studentRepository_1.default(), new otpRepository_1.default()));
let catogariesController = new catagoriesControlller_1.default(new catoogariesServices_1.default(new catogariesRepository_1.default()));
let instructorController = new instructorController_1.default(new instructorService_1.default(new instructorRepository_1.default(), new otpRepository_1.default()));
let courseController = new courseConstroller_1.default(new courseService_1.default(new courseRepository_1.default(), new assignmentRepository_1.default()), new instructorService_1.default(new instructorRepository_1.default(), new otpRepository_1.default()), new lessonService_1.default(new lessonsRepository_1.default()), new chapterService_1.default(new chapterRepository_1.default()), new catoogariesServices_1.default(new catogariesRepository_1.default()), new enrolledCourseService_1.default(new enrolledCourseRepository_1.default()), new studentService_1.default(new studentRepository_1.default(), new otpRepository_1.default()));
let adminRoute = express_1.default.Router();
adminRoute.get('/listUser', studentController.listStudents.bind(studentController));
adminRoute.get('/listInstructors', instructorController.listAll.bind(instructorController));
adminRoute.patch('/changeStatus/:id', studentController.blockAndUnblock.bind(studentController));
adminRoute.post('/addCatagorie', catogariesController.createCatogary.bind(catogariesController));
adminRoute.get('/listCatagories', catogariesController.getCatogaries.bind(catogariesController));
adminRoute.get('/getCatagories/:id', catogariesController.getCatogaryById.bind(catogariesController));
adminRoute.patch('/updateCatagory/:id', catogariesController.updateCatogary.bind(catogariesController));
adminRoute.delete('/deleteCatagory/:id', catogariesController.deleteCatogary.bind(catogariesController));
adminRoute.patch('/catagory/:id/changeStatus', catogariesController.blockStatus.bind(catogariesController));
adminRoute.get('/listAllCourses', courseController.listAllCourses.bind(courseController));
adminRoute.patch('/course/:id/changeStatus', courseController.verifyCourse.bind(courseController));
exports.default = adminRoute;
