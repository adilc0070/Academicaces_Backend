"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const adminController_1 = __importDefault(require("../controllers/adminController"));
const adminRepository_1 = __importDefault(require("../repositories/adminRepository"));
const adminService_1 = __importDefault(require("../services/adminService"));
const studentController_1 = __importDefault(require("../controllers/studentController"));
const studentService_1 = __importDefault(require("../services/studentService"));
const studentRepository_1 = __importDefault(require("../repositories/studentRepository"));
const otpRepository_1 = __importDefault(require("../repositories/otpRepository"));
const instructorController_1 = __importDefault(require("../controllers/instructorController"));
const instructorService_1 = __importDefault(require("../services/instructorService"));
const instructorRepository_1 = __importDefault(require("../repositories/instructorRepository"));
const adminController = new adminController_1.default(new adminService_1.default(new adminRepository_1.default()));
const studentController = new studentController_1.default(new studentService_1.default(new studentRepository_1.default(), new otpRepository_1.default()));
const instructorController = new instructorController_1.default(new instructorService_1.default(new instructorRepository_1.default(), new otpRepository_1.default()));
const authRoute = express_1.default.Router();
authRoute.get('/admin', adminController.createAdmin);
authRoute.post('/admin/login', adminController.adminLogin.bind(adminController));
authRoute.post('/user/signUp', studentController.signUpUser.bind(studentController));
authRoute.post('/user/signIn', studentController.signInUser.bind(studentController));
authRoute.get('/user/logout', studentController.logout.bind(studentController));
authRoute.post('/user/verifyOtp', studentController.verifyUser.bind(studentController));
authRoute.post('/user/forgetPassword', studentController.forgotPassword.bind(studentController));
authRoute.post('/user/resetPassword', studentController.changePassword.bind(studentController));
authRoute.post('/instructor/signUp', instructorController.create.bind(instructorController));
authRoute.post('/instructor/signIn', instructorController.login.bind(instructorController));
authRoute.post('/instructor/verifyOtp', instructorController.verification.bind(instructorController));
authRoute.post('/instructor/forgetPassword', instructorController.forgetPassword.bind(instructorController));
authRoute.post('/instructor/resetPassword', instructorController.changePassword.bind(instructorController));
authRoute.post('/instructor/editPassword', instructorController.editPassword.bind(instructorController));
exports.default = authRoute;
