"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const otpRepository_1 = __importDefault(require("../repositories/otpRepository"));
const chapterRepository_1 = __importDefault(require("../repositories/chapterRepository"));
const courseConstroller_1 = __importDefault(require("../controllers/courseConstroller"));
const courseService_1 = __importDefault(require("../services/courseService"));
const courseRepository_1 = __importDefault(require("../repositories/courseRepository"));
const instructorService_1 = __importDefault(require("../services/instructorService"));
const instructorRepository_1 = __importDefault(require("../repositories/instructorRepository"));
const lessonService_1 = __importDefault(require("../services/lessonService"));
const lessonsRepository_1 = __importDefault(require("../repositories/lessonsRepository"));
const chapterService_1 = __importDefault(require("../services/chapterService"));
const catogariesRepository_1 = __importDefault(require("../repositories/catogariesRepository"));
const catoogariesServices_1 = __importDefault(require("../services/catoogariesServices"));
const enrolledCourseService_1 = __importDefault(require("../services/enrolledCourseService"));
const enrolledCourseRepository_1 = __importDefault(require("../repositories/enrolledCourseRepository"));
const studentController_1 = __importDefault(require("../controllers/studentController"));
const studentService_1 = __importDefault(require("../services/studentService"));
const studentRepository_1 = __importDefault(require("../repositories/studentRepository"));
const chatController_1 = __importDefault(require("../controllers/chatController"));
const chatService_1 = __importDefault(require("../services/chatService"));
const chatRepository_1 = __importDefault(require("../repositories/chatRepository"));
const assignmentRepository_1 = __importDefault(require("../repositories/assignmentRepository"));
const studentController = new studentController_1.default(new studentService_1.default(new studentRepository_1.default(), new otpRepository_1.default()));
const courseController = new courseConstroller_1.default(new courseService_1.default(new courseRepository_1.default(), new assignmentRepository_1.default()), new instructorService_1.default(new instructorRepository_1.default(), new otpRepository_1.default()), new lessonService_1.default(new lessonsRepository_1.default()), new chapterService_1.default(new chapterRepository_1.default()), new catoogariesServices_1.default(new catogariesRepository_1.default()), new enrolledCourseService_1.default(new enrolledCourseRepository_1.default()), new studentService_1.default(new studentRepository_1.default(), new otpRepository_1.default()));
const chatController = new chatController_1.default(new chatService_1.default(new chatRepository_1.default()));
const studentRoute = express_1.default.Router();
studentRoute.get('/getId', studentController.getId.bind(studentController));
studentRoute.get('/listCourse', courseController.list.bind(courseController));
studentRoute.post('/enrollCourse', courseController.enrollCourseCheckout.bind(courseController));
studentRoute.post('/enroll', courseController.enroll.bind(courseController));
studentRoute.get('/myCourses/:id', courseController.myCourse.bind(courseController));
studentRoute.get('/:id/viewCourse', courseController.viewCourse.bind(courseController));
studentRoute.get('/:id/course/:courseId/isEnrolled', courseController.isEnrolled.bind(courseController));
studentRoute.post('/:id/:courseId/postReview', courseController.postReview.bind(courseController));
studentRoute.post('/reviews/:reviewId/reply', courseController.postReply.bind(courseController));
studentRoute.get('/:courseId/listReviews', courseController.getReview.bind(courseController));
studentRoute.get('/:id/getChat', chatController.getChat.bind(chatController));
studentRoute.get('/:id/listChats', chatController.listStudentChats.bind(chatController));
studentRoute.post('/:id/sendChat', chatController.createMessage.bind(chatController));
studentRoute.get('/:id/listMessages', chatController.getMessages.bind(chatController));
studentRoute.get('/:id/listAssignments', courseController.findAssignmentByCourse.bind(courseController));
studentRoute.get('/:id/getAssignment', courseController.findAssignment.bind(courseController));
exports.default = studentRoute;
